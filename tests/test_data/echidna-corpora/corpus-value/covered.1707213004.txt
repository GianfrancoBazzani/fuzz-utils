/Users/elvisskozdopolj/Documents/GitHub/test-generator/tests/test_data/src/BasicTypes.sol
   1 |     | pragma solidity ^0.8.0;
   2 |     | 
   3 |     | // Ran from test directory: echidna . --contract BasicTypes --test-mode assertion --test-limit 100000 --corpus-dir echidna-corpora/corpus-basic --crytic-args "--foundry-ignore-compile"
   4 |     | // Ran from test directory: test-generator ./src/BasicTypes.sol --corpus-dir echidna-corpora/corpus-basic --contract "BasicTypes" --test-directory "./test/" --inheritance-path "../src/" --fuzzer echidna
   5 |     | contract BasicTypes {
   6 |     | 
   7 |     |     // ------------------------------
   8 |     |     //         --  bool  --
   9 |     |     // ------------------------------
  10 |     |     bool first;
  11 |     | 
  12 |     |     function setBool(bool set) public {
  13 |     |         first = set;
  14 |     |     }
  15 |     | 
  16 |     |     function check_bool() public {
  17 |     |         if (first) {
  18 |     |             assert(false);
  19 |     |         }
  20 |     |     }
  21 |     | 
  22 |     |     // ------------------------------
  23 |     |     //         --  uint  --
  24 |     |     // ------------------------------
  25 |     |     uint256 _uint256 = 3;
  26 |     | 
  27 |     |     function setUint256(uint256 input) public {
  28 |     |         _uint256 = input;
  29 |     |     }
  30 |     | 
  31 |     |     function check_uint256() public {
  32 |     |         if (_uint256 % 2 == 0) {
  33 |     |             assert(false);
  34 |     |         }
  35 |     |     }
  36 |     | 
  37 |     |     function check_large_uint256() public {
  38 |     |         if (_uint256 == type(uint256).max) {
  39 |     |             assert(false);
  40 |     |         }
  41 |     |     }
  42 |     | 
  43 |     |     // ------------------------------
  44 |     |     //         --  int  --
  45 |     |     // ------------------------------
  46 |     |     int256 _int256 = 3;
  47 |     | 
  48 |     |     function setInt256(int256 input) public {
  49 |     |         _int256 = input;
  50 |     |     }
  51 |     | 
  52 |     |     function check_int256() public {
  53 |     |         if (_int256 % 2 == 0) {
  54 |     |             assert(false);
  55 |     |         }
  56 |     |     }
  57 |     | 
  58 |     |     function check_large_positive_int256() public {
  59 |     |         if (_int256 == type(int256).max) {
  60 |     |             assert(false);
  61 |     |         }
  62 |     |     }
  63 |     | 
  64 |     |     function check_large_negative_int256() public {
  65 |     |         if (_int256 == type(int256).min) {
  66 |     |             assert(false);
  67 |     |         }
  68 |     |     }
  69 |     |     // ------------------------------
  70 |     |     //         --  address  --
  71 |     |     // ------------------------------
  72 |     |     address providedAddress;
  73 |     | 
  74 |     |     function setAddress(address input) public {
  75 |     |         require(input != address(0));
  76 |     |         providedAddress = input;
  77 |     |     }
  78 |     | 
  79 |     |     function check_address() public {
  80 |     |         if (providedAddress != address(0)) {
  81 |     |             assert(false);
  82 |     |         }
  83 |     |     }
  84 |     |     // ------------------------------
  85 |     |     //         --  string  --
  86 |     |     // ------------------------------
  87 |     |     string providedString;
  88 |     | 
  89 |     |     function setString(string memory input) public {
  90 |     |         require(bytes(input).length > 20);
  91 |     |         providedString = input;
  92 |     |     }
  93 |     | 
  94 |     |     function check_string() public {
  95 |     |         if (bytes(providedString).length > 20) {
  96 |     |             assert(false);
  97 |     |         }
  98 |     |     }
  99 |     | 
 100 |     |     function check_specific_string(string memory provided) public {
 101 |     |         require(bytes(provided).length > 0);
 102 |     |         if (keccak256(bytes(provided)) == keccak256(bytes(hex"00"))) {
 103 |     |             assert(false);
 104 |     |         }
 105 |     |     }
 106 |     | 
 107 |     |     // ------------------------------
 108 |     |     //         --  bytes  --
 109 |     |     // ------------------------------
 110 |     |     bytes providedBytes;
 111 |     |     bytes32 providedBytes32;
 112 |     | 
 113 |     |     // TODO bytes32, etc.
 114 |     |     function setBytes(bytes memory input) public {
 115 |     |         require(input.length > 20);
 116 |     |         providedBytes = input;
 117 |     |     }
 118 |     | 
 119 |     |     function check_bytes() public {
 120 |     |         if (providedBytes.length > 20) {
 121 |     |             assert(false);
 122 |     |         }
 123 |     |     }
 124 |     | 
 125 |     |     /// @notice bytes32 has decoding issues right now 
 126 |     |     /* function setBytes32(bytes32 input) public {
 127 |     |         require(input != bytes32(0));
 128 |     |         providedBytes32 = input;
 129 |     |     }
 130 |     | 
 131 |     |     function check_bytes32() public {
 132 |     |         if (providedBytes32 != bytes32(0)) {
 133 |     |             assert(false);
 134 |     |         }
 135 |     |     }  */
 136 |     | 
 137 |     |     // ------------------------------
 138 |     |     //         --  combination  --
 139 |     |     // ------------------------------
 140 |     |     bool combBool;
 141 |     |     uint256 combUint256;
 142 |     |     int256 combInt256;
 143 |     |     address combAddress;
 144 |     |     string combString;
 145 |     |     bytes combBytes;
 146 |     | 
 147 |     |     function setCombination(bool bool_input, uint256 unsigned_input, int256 signed_input, address address_input, string memory str_input, bytes memory bytes_input) public {
 148 |     |         combBool = bool_input;
 149 |     |         combUint256 = unsigned_input;
 150 |     |         combInt256 = signed_input;
 151 |     |         combAddress = address_input;
 152 |     |         combString = str_input;
 153 |     |         combBytes = bytes_input;
 154 |     |     }
 155 |     | 
 156 |     |     function check_combined_input() public {
 157 |     |         if (combBool && combUint256 > 0 && combInt256 < 0 && combAddress != address(0) && bytes(combString).length > 0 && combBytes.length > 0) {
 158 |     |             assert(false);
 159 |     |         }
 160 |     |     }
 161 |     | }

/Users/elvisskozdopolj/Documents/GitHub/test-generator/tests/test_data/src/DynamicArrays.sol
   1 |     | pragma solidity ^0.8.0;
   2 |     | 
   3 |     | // Ran from test directory: echidna . --contract DynamicArrays --test-mode assertion --test-limit 100000 --corpus-dir echidna-corpora/corpus-dyn-arr --crytic-args "--foundry-ignore-compile"
   4 |     | // Ran from test directory: test-generator ./src/DynamicArrays.sol --corpus-dir echidna-corpora/corpus-dyn-arr --contract "DynamicArrays" --test-directory "./test/" --inheritance-path "../src/" --fuzzer echidna
   5 |     | contract DynamicArrays {
   6 |     | 
   7 |     |     // ------------------------------
   8 |     |     //         --  bool array  --
   9 |     |     // ------------------------------
  10 |     |     bool[] boolDynArr;
  11 |     | 
  12 |     |     function addBoolArr(bool[] memory input) public {
  13 |     |         for(uint256 i; i < input.length; i++) {
  14 |     |             boolDynArr.push(input[i]);
  15 |     |         }  
  16 |     |     }
  17 |     | 
  18 |     |     function check_boolArr() public {
  19 |     |         uint256 count;
  20 |     |         for(uint256 i; i < boolDynArr.length; i++) {
  21 |     |             if (boolDynArr[i]) {
  22 |     |                 count++;
  23 |     |             }
  24 |     |         }
  25 |     | 
  26 |     |         if (count > 3) {
  27 |     |             assert(false);
  28 |     |         }
  29 |     |     }
  30 |     |     // ------------------------------
  31 |     |     //         --  uint array  --
  32 |     |     // ------------------------------
  33 |     |     uint256[] uintDynArr;
  34 |     | 
  35 |     |     function addUintArr(uint256[] memory input) public {
  36 |     |         for (uint256 i; i < input.length; i++) {
  37 |     |             uintDynArr.push(input[i]);
  38 |     |         }
  39 |     |     }
  40 |     | 
  41 |     |     function check_uintDynArr() public {
  42 |     |         uint256 sum;
  43 |     |         for(uint256 i; i < uintDynArr.length; i++) {
  44 |     |             sum += uintDynArr[i];
  45 |     |         }
  46 |     | 
  47 |     |         if (sum != 0 && sum % 3 == 0) {
  48 |     |             assert(false);
  49 |     |         }
  50 |     |     }
  51 |     | 
  52 |     |     // ------------------------------
  53 |     |     //         --  int array  --
  54 |     |     // ------------------------------
  55 |     |     int256[] intDynArr;
  56 |     | 
  57 |     |     function addIntArr(int256[] memory input) public {
  58 |     |         for (uint256 i; i < input.length; i++) {
  59 |     |             intDynArr.push(input[i]);
  60 |     |         }
  61 |     |     }
  62 |     | 
  63 |     |     function check_intDynArr() public {
  64 |     |         int256 sum;
  65 |     |         for(uint256 i; i < intDynArr.length; i++) {
  66 |     |             sum += intDynArr[i];
  67 |     |         }
  68 |     | 
  69 |     |         if (sum != 0 && sum % 3 == 0) {
  70 |     |             assert(false);
  71 |     |         }
  72 |     |     }
  73 |     | 
  74 |     |     // ------------------------------
  75 |     |     //         --  address array  --
  76 |     |     // ------------------------------
  77 |     |     address[] addressDynArr;
  78 |     | 
  79 |     |     function addAddressArr(address[] memory input) public {
  80 |     |         for(uint256 i; i < input.length; i++) {
  81 |     |             addressDynArr.push(input[i]);
  82 |     |         }
  83 |     |     }
  84 |     | 
  85 |     |     function check_addressDynArr() public {
  86 |     |         uint256 count = 0;
  87 |     |         // At least 3 should be non-zero
  88 |     |         for(uint256 i; i < addressDynArr.length; i++) {
  89 |     |             if(addressDynArr[i] != address(0)) {
  90 |     |                 count++;
  91 |     |             }
  92 |     |         }
  93 |     | 
  94 |     |         if (count > 3) {
  95 |     |             assert(false);
  96 |     |         }
  97 |     |     }
  98 |     |     // ------------------------------
  99 |     |     //         --  string array  --
 100 |     |     // ------------------------------
 101 |     |     string[] strDynArr;
 102 |     | 
 103 |     |     function addStrArr(string[] memory input) public {
 104 |     |         for(uint256 i; i < input.length; i++) {
 105 |     |             strDynArr.push(input[i]);
 106 |     |         }
 107 |     |     }
 108 |     | 
 109 |     |     function check_strDynArr() public {
 110 |     |         uint256 count;
 111 |     |         for(uint256 i; i < strDynArr.length; i++) {
 112 |     |             if (bytes(strDynArr[i]).length > 0) {
 113 |     |                 count++;
 114 |     |             }
 115 |     |         }
 116 |     |         if (count > 3) {
 117 |     |             assert(false);
 118 |     |         }
 119 |     |     }
 120 |     | 
 121 |     |     // ------------------------------
 122 |     |     //         --  bytes array  --
 123 |     |     // ------------------------------
 124 |     |     bytes[] bytesDynArr;
 125 |     | 
 126 |     |     function addBytesArr(bytes[] memory input) public {
 127 |     |         for(uint256 i; i < input.length; i++) {
 128 |     |             bytesDynArr.push(input[i]);
 129 |     |         }
 130 |     |     }
 131 |     | 
 132 |     |     function check_bytesArr() public {
 133 |     |         uint256 count;
 134 |     |         for(uint256 i; i < bytesDynArr.length; i++) {
 135 |     |             if(bytesDynArr[i].length > 0) {
 136 |     |                 count++;
 137 |     |             }
 138 |     |         }
 139 |     | 
 140 |     |         if (count > 3) {
 141 |     |             assert(false);
 142 |     |         }
 143 |     |     }
 144 |     | }

/Users/elvisskozdopolj/Documents/GitHub/test-generator/tests/test_data/src/FixedArrays.sol
   1 |     | pragma solidity ^0.8.0;
   2 |     | 
   3 |     | // Ran from test directory: echidna . --contract FixedArrays --test-mode assertion --test-limit 100000 --corpus-dir echidna-corpora/corpus-fixed-arr --crytic-args "--foundry-ignore-compile"
   4 |     | // Ran from test directory: test-generator ./src/FixedArrays.sol --corpus-dir echidna-corpora/corpus-fixed-arr --contract "FixedArrays" --test-directory "./test/" --inheritance-path "../src/" --fuzzer echidna
   5 |     | contract FixedArrays {
   6 |     | 
   7 |     |     // ------------------------------
   8 |     |     //         --  bool array  --
   9 |     |     // ------------------------------
  10 |     |     bool[3] boolArr;
  11 |     | 
  12 |     |     function addBoolArr(bool[3] memory input) public {
  13 |     |         for(uint256 i; i < boolArr.length; i++) {
  14 |     |             boolArr[i] = input[i];
  15 |     |         }  
  16 |     |     }
  17 |     | 
  18 |     |     function check_boolArr() public {
  19 |     |         if (boolArr[0] && !boolArr[1] && boolArr[2]) {
  20 |     |             assert(false);
  21 |     |         }
  22 |     |     }
  23 |     |     // ------------------------------
  24 |     |     //         --  uint array  --
  25 |     |     // ------------------------------
  26 |     |     uint256[2] uintArr;
  27 |     | 
  28 |     |     function addUintArr(uint256[2] memory input) public {
  29 |     |         for(uint256 i; i < uintArr.length; i++) {
  30 |     |             uintArr[i] = input[i];
  31 |     |         }
  32 |     |     }
  33 |     | 
  34 |     |     function check_uintArr() public {
  35 |     |         uint256 sum;
  36 |     |         for(uint256 i; i < uintArr.length; i++) {
  37 |     |             sum += uintArr[i];
  38 |     |         }
  39 |     |         if (sum == 5) {
  40 |     |             assert(false);
  41 |     |         }
  42 |     |     }
  43 |     |     // ------------------------------
  44 |     |     //         --  int array  --
  45 |     |     // ------------------------------
  46 |     |     int256[2] intArr;
  47 |     | 
  48 |     |     function addIntArr(int256[2] memory input) public {
  49 |     |         for(uint256 i; i < intArr.length; i++) {
  50 |     |             intArr[i] = input[i];
  51 |     |         }
  52 |     |     }
  53 |     | 
  54 |     |     function check_intArr() public {
  55 |     |         int256 sum;
  56 |     |         for(uint256 i; i < intArr.length; i++) {
  57 |     |             sum += intArr[i];
  58 |     |         }
  59 |     |         if (sum == 5) {
  60 |     |             assert(false);
  61 |     |         }
  62 |     |     }
  63 |     | 
  64 |     |     // ------------------------------
  65 |     |     //         --  address array  --
  66 |     |     // ------------------------------
  67 |     |     address[4] addressArr;
  68 |     | 
  69 |     |     function addAddressArr(address[4] memory input) public {
  70 |     |         for(uint256 i; i < addressArr.length; i++) {
  71 |     |             addressArr[i] = input[i];
  72 |     |         }
  73 |     |     }
  74 |     | 
  75 |     |     function check_addressArr() public {
  76 |     |         uint256 count = 1;
  77 |     |         // At least 3 should be non-zero
  78 |     |         for(uint256 i; i < addressArr.length; i++) {
  79 |     |             if(addressArr[i] != address(0)) {
  80 |     |                 count++;
  81 |     |             }
  82 |     |         }
  83 |     | 
  84 |     |         if (count == addressArr.length) {
  85 |     |             assert(false);
  86 |     |         }
  87 |     |     }
  88 |     |     // ------------------------------
  89 |     |     //         --  string array  --
  90 |     |     // ------------------------------
  91 |     |     string[2] strArr;
  92 |     | 
  93 |     |     function addStrArr(string[2] memory input) public {
  94 |     |         for(uint256 i; i < strArr.length; i++) {
  95 |     |             strArr[i] = input[i];
  96 |     |         }
  97 |     |     }
  98 |     | 
  99 |     |     function check_strArr() public {
 100 |     |         if (bytes(strArr[0]).length > 0 && bytes(strArr[1]).length > 0) {
 101 |     |             assert(false);
 102 |     |         }
 103 |     |     }
 104 |     |     // ------------------------------
 105 |     |     //         --  bytes array  --
 106 |     |     // ------------------------------
 107 |     |     bytes[2] bytesArr;
 108 |     | 
 109 |     |     function addBytesArr(bytes[2] memory input) public {
 110 |     |         for(uint256 i; i < bytesArr.length; i++) {
 111 |     |             bytesArr[i] = input[i];
 112 |     |         }
 113 |     |     }
 114 |     | 
 115 |     |     function check_bytesArr() public {
 116 |     |         if (bytesArr[0].length > 0 && bytesArr[1].length > 0) {
 117 |     |             assert(false);
 118 |     |         }
 119 |     |     }
 120 |     | }

/Users/elvisskozdopolj/Documents/GitHub/test-generator/tests/test_data/src/IStruct.sol
 1 |     | interface IStruct {
 2 |     |     struct Inherited {
 3 |     |         uint256 uintType;
 4 |     |         bool boolType;
 5 |     |     }
 6 |     | }

/Users/elvisskozdopolj/Documents/GitHub/test-generator/tests/test_data/src/MultiDimensionalDynamicArrays.sol
   1 |     | pragma solidity ^0.8.0;
   2 |     | 
   3 |     | // Ran from test directory: echidna . --contract MultiDimensionalDynamicArrays --test-mode assertion --test-limit 100000 --corpus-dir echidna-corpora/corpus-multi-dyn-arr --crytic-args "--foundry-ignore-compile"
   4 |     | // Ran from test directory: test-generator ./src/MultiDimensionalDynamicArrays.sol --corpus-dir echidna-corpora/corpus-multi-dyn-arr --contract "MultiDimensionalDynamicArrays" --test-directory "./test/" --inheritance-path "../src/" --fuzzer echidna
   5 |     | contract MultiDimensionalDynamicArrays {
   6 |     |     // ----- 2-dimensional arrays ------
   7 |     | 
   8 |     |     // ------------------------------
   9 |     |     //         --  bool array  --
  10 |     |     // ------------------------------
  11 |     |     bool[][] boolArr;
  12 |     | 
  13 |     |     function addBoolArr(bool[][] memory input) public {
  14 |     |         for (uint256 i; i < input.length; i++) {
  15 |     |             boolArr[i] = input[i];
  16 |     |         }
  17 |     |     }
  18 |     | 
  19 |     |     function check_boolArr() public {
  20 |     |         uint256 count;
  21 |     |         for (uint256 i; i < boolArr.length; i++) {
  22 |     |             for (uint256 j; j < boolArr[i].length; i++) {
  23 |     |                 if (boolArr[i][j]) {
  24 |     |                     count++;
  25 |     |                 }
  26 |     |             }
  27 |     |         }
  28 |     | 
  29 |     |         if (count > 3) {
  30 |     |             assert(false);
  31 |     |         }
  32 |     |     }
  33 |     | 
  34 |     |     // ------------------------------
  35 |     |     //         --  uint array  --
  36 |     |     // ------------------------------
  37 |     |     uint256[][] uintArr;
  38 |     | 
  39 |     |     function addUintArr(uint256[][] memory input) public {
  40 |     |         for (uint256 i; i < input.length; i++) {
  41 |     |             uintArr[i] = input[i];
  42 |     |         }
  43 |     |     }
  44 |     | 
  45 |     |     function check_uintArr() public {
  46 |     |         uint256 sum;
  47 |     |         for (uint256 i; i < uintArr.length; i++) {
  48 |     |             for (uint256 j; i < uintArr[i].length; i++) {
  49 |     |                 sum += uintArr[i][j];
  50 |     |             }
  51 |     |         }
  52 |     |         if (sum > 10) {
  53 |     |             assert(false);
  54 |     |         }
  55 |     |     }
  56 |     | 
  57 |     |     // ------------------------------
  58 |     |     //         --  int array  --
  59 |     |     // ------------------------------
  60 |     |     int256[][] intArr;
  61 |     | 
  62 |     |     function addIntArr(int256[][] memory input) public {
  63 |     |         for (uint256 i; i < input.length; i++) {
  64 |     |             intArr[i] = input[i];
  65 |     |         }
  66 |     |     }
  67 |     | 
  68 |     |     function check_intArr() public {
  69 |     |         int256 sum;
  70 |     |         for (uint256 i; i < intArr.length; i++) {
  71 |     |             for (uint256 j; j < intArr[i].length; i++) {
  72 |     |                 sum += intArr[i][j];
  73 |     |             }
  74 |     |         }
  75 |     |         if (sum == 5) {
  76 |     |             assert(false);
  77 |     |         }
  78 |     |     }
  79 |     | 
  80 |     |     // ------------------------------
  81 |     |     //         --  address array  --
  82 |     |     // ------------------------------
  83 |     |     address[][] addressArr;
  84 |     | 
  85 |     |     function addAddressArr(address[][] memory input) public {
  86 |     |         for (uint256 i; i < input.length; i++) {
  87 |     |             addressArr[i] = input[i];
  88 |     |         }
  89 |     |     }
  90 |     | 
  91 |     |     function check_addressArr() public {
  92 |     |         uint256 count = 1;
  93 |     |         // At least 3 should be non-zero
  94 |     |         for (uint256 i; i < addressArr.length; i++) {
  95 |     |             for (uint256 j; j < addressArr[i].length; i++) {
  96 |     |                 if (addressArr[i][j] != address(0)) {
  97 |     |                     count++;
  98 |     |                 }
  99 |     |             }
 100 |     |         }
 101 |     | 
 102 |     |         if (count > addressArr.length) {
 103 |     |             assert(false);
 104 |     |         }
 105 |     |     }
 106 |     | 
 107 |     |     // ------------------------------
 108 |     |     //         --  string array  --
 109 |     |     // ------------------------------
 110 |     |     string[][] strArr;
 111 |     | 
 112 |     |     function addStrArr(string[][] memory input) public {
 113 |     |         for (uint256 i; i < input.length; i++) {
 114 |     |             strArr[i] = input[i];
 115 |     |         }
 116 |     |     }
 117 |     | 
 118 |     |     function check_strArr() public {
 119 |     |         uint256 count;
 120 |     |         for (uint256 i; i < strArr.length; i++) {
 121 |     |             for (uint256 j; j < strArr[i].length; j++) {
 122 |     |                 if (bytes(strArr[i][j]).length > 0) {
 123 |     |                     count++;
 124 |     |                 }
 125 |     |             }
 126 |     |         }
 127 |     |         if (count == 2) {
 128 |     |             assert(false);
 129 |     |         }
 130 |     |     }
 131 |     | 
 132 |     |     // ------------------------------
 133 |     |     //         --  bytes array  --
 134 |     |     // ------------------------------
 135 |     |     bytes[][] bytesArr;
 136 |     | 
 137 |     |     function addBytesArr(bytes[][] memory input) public {
 138 |     |         for (uint256 i; i < input.length; i++) {
 139 |     |             bytesArr[i] = input[i];
 140 |     |         }
 141 |     |     }
 142 |     | 
 143 |     |     function check_bytesArr() public {
 144 |     |         uint256 count;
 145 |     |         for (uint256 i; i < bytesArr.length; i++) {
 146 |     |             for (uint256 j; j < bytesArr[i].length; j++) {
 147 |     |                 if (bytesArr[i][j].length > 0) {
 148 |     |                     count++;
 149 |     |                 }
 150 |     |             }
 151 |     |         }
 152 |     | 
 153 |     |         if (count == 4) {
 154 |     |             assert(false);
 155 |     |         }
 156 |     |     }
 157 |     | }
 158 |     | 

/Users/elvisskozdopolj/Documents/GitHub/test-generator/tests/test_data/src/MultiDimensionalFixedArrays.sol
   1 |     | pragma solidity ^0.8.0;
   2 |     | 
   3 |     | // Ran from test directory: echidna . --contract MultiDimensionalFixedArrays --test-mode assertion --test-limit 100000 --corpus-dir echidna-corpora/corpus-multi-fixed-arr --crytic-args "--foundry-ignore-compile"
   4 |     | // Ran from test directory: test-generator ./src/MultiDimensionalFixedArrays.sol --corpus-dir echidna-corpora/corpus-multi-fixed-arr --contract "MultiDimensionalFixedArrays" --test-directory "./test/" --inheritance-path "../src/" --fuzzer echidna
   5 |     | contract MultiDimensionalFixedArrays {
   6 |     |     /* ----- 2-dimensional arrays */
   7 |     | 
   8 |     |     // ------------------------------
   9 |     |     //         --  bool array  --
  10 |     |     // ------------------------------
  11 |     |     bool[3][2] boolArr;
  12 |     | 
  13 |     |     function addBoolArr(bool[3][2] memory input) public {
  14 |     |         for (uint256 i; i < boolArr.length; i++) {
  15 |     |             boolArr[i] = input[i];
  16 |     |         }
  17 |     |     }
  18 |     | 
  19 |     |     function check_boolArr() public {
  20 |     |         uint256 count;
  21 |     |         for (uint256 i; i < boolArr.length; i++) {
  22 |     |             for (uint256 j; j < boolArr[i].length; i++) {
  23 |     |                 if (boolArr[i][j]) {
  24 |     |                     count++;
  25 |     |                 }
  26 |     |             }
  27 |     |         }
  28 |     | 
  29 |     |         if (count > 3) {
  30 |     |             assert(false);
  31 |     |         }
  32 |     |     }
  33 |     | 
  34 |     |     // ------------------------------
  35 |     |     //         --  uint array  --
  36 |     |     // ------------------------------
  37 |     |     uint256[2][3] uintArr;
  38 |     | 
  39 |     |     function addUintArr(uint256[2][3] memory input) public {
  40 |     |         for (uint256 i; i < uintArr.length; i++) {
  41 |     |             uintArr[i] = input[i];
  42 |     |         }
  43 |     |     }
  44 |     | 
  45 |     |     function check_uintArr() public {
  46 |     |         uint256 sum;
  47 |     |         for (uint256 i; i < uintArr.length; i++) {
  48 |     |             for (uint256 j; i < uintArr[i].length; i++) {
  49 |     |                 sum += uintArr[i][j];
  50 |     |             }
  51 |     |         }
  52 |     |         if (sum > 10) {
  53 |     |             assert(false);
  54 |     |         }
  55 |     |     }
  56 |     | 
  57 |     |     // ------------------------------
  58 |     |     //         --  int array  --
  59 |     |     // ------------------------------
  60 |     |     int256[2][1] intArr;
  61 |     | 
  62 |     |     function addIntArr(int256[2][1] memory input) public {
  63 |     |         for (uint256 i; i < intArr.length; i++) {
  64 |     |             intArr[i] = input[i];
  65 |     |         }
  66 |     |     }
  67 |     | 
  68 |     |     function check_intArr() public {
  69 |     |         int256 sum;
  70 |     |         for (uint256 i; i < intArr.length; i++) {
  71 |     |             for (uint256 j; j < intArr[i].length; i++) {
  72 |     |                 sum += intArr[i][j];
  73 |     |             }
  74 |     |         }
  75 |     |         if (sum == 5) {
  76 |     |             assert(false);
  77 |     |         }
  78 |     |     }
  79 |     | 
  80 |     |     // ------------------------------
  81 |     |     //         --  address array  --
  82 |     |     // ------------------------------
  83 |     |     address[4][2] addressArr;
  84 |     | 
  85 |     |     function addAddressArr(address[4][2] memory input) public {
  86 |     |         for (uint256 i; i < addressArr.length; i++) {
  87 |     |             addressArr[i] = input[i];
  88 |     |         }
  89 |     |     }
  90 |     | 
  91 |     |     function check_addressArr() public {
  92 |     |         uint256 count = 1;
  93 |     |         // At least 3 should be non-zero
  94 |     |         for (uint256 i; i < addressArr.length; i++) {
  95 |     |             for (uint256 j; j < addressArr[i].length; i++) {
  96 |     |                 if (addressArr[i][j] != address(0)) {
  97 |     |                     count++;
  98 |     |                 }
  99 |     |             }
 100 |     |         }
 101 |     | 
 102 |     |         if (count > addressArr.length) {
 103 |     |             assert(false);
 104 |     |         }
 105 |     |     }
 106 |     | 
 107 |     |     // ------------------------------
 108 |     |     //         --  string array  --
 109 |     |     // ------------------------------
 110 |     |     string[2][1] strArr;
 111 |     | 
 112 |     |     function addStrArr(string[2][1] memory input) public {
 113 |     |         for (uint256 i; i < strArr.length; i++) {
 114 |     |             strArr[i] = input[i];
 115 |     |         }
 116 |     |     }
 117 |     | 
 118 |     |     function check_strArr() public {
 119 |     |         uint256 count;
 120 |     |         for (uint256 i; i < strArr.length; i++) {
 121 |     |             for (uint256 j; j < strArr[i].length; j++) {
 122 |     |                 if (bytes(strArr[i][j]).length > 0) {
 123 |     |                     count++;
 124 |     |                 }
 125 |     |             }
 126 |     |         }
 127 |     |         if (count == 2) {
 128 |     |             assert(false);
 129 |     |         }
 130 |     |     }
 131 |     | 
 132 |     |     // ------------------------------
 133 |     |     //         --  bytes array  --
 134 |     |     // ------------------------------
 135 |     |     bytes[2][2] bytesArr;
 136 |     | 
 137 |     |     function addBytesArr(bytes[2][2] memory input) public {
 138 |     |         for (uint256 i; i < bytesArr.length; i++) {
 139 |     |             bytesArr[i] = input[i];
 140 |     |         }
 141 |     |     }
 142 |     | 
 143 |     |     function check_bytesArr() public {
 144 |     |         uint256 count;
 145 |     |         for (uint256 i; i < bytesArr.length; i++) {
 146 |     |             for (uint256 j; j < bytesArr[i].length; j++) {
 147 |     |                 if (bytesArr[i][j].length > 0) {
 148 |     |                     count++;
 149 |     |                 }
 150 |     |             }
 151 |     |         }
 152 |     | 
 153 |     |         if (count == 4) {
 154 |     |             assert(false);
 155 |     |         }
 156 |     |     }
 157 |     | }
 158 |     | 

/Users/elvisskozdopolj/Documents/GitHub/test-generator/tests/test_data/src/TimeAdvancement.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | // Ran from test directory: echidna . --contract TimeAdvancement --test-mode assertion --test-limit 10000 --corpus-dir echidna-corpora/corpus-time --crytic-args "--foundry-ignore-compile"
  4 |     | // Ran from test directory: test-generator ./src/TupleTypes.sol --corpus-dir echidna-corpora/corpus-struct --contract "TupleTypes" --test-directory "./test/" --inheritance-path "../src/" --fuzzer echidna
  5 |     | 
  6 |     | contract TimeAdvancement {
  7 |     |     bool timeSet;
  8 |     |     bool blockSet;
  9 |     |     uint256 timestamp;
 10 |     |     uint256 blockNumber;
 11 |     | 
 12 |     |     // ------------------------------
 13 |     |     //         --  timestamp  --
 14 |     |     // ------------------------------
 15 |     | 
 16 |     |     function setTimestamp() public {
 17 |     |         timeSet = true;
 18 |     |         timestamp = block.timestamp;
 19 |     |     }
 20 |     | 
 21 |     |     function check_timestamp() public {
 22 |     |         if (timeSet) {
 23 |     |             assert(block.timestamp <= timestamp);
 24 |     |         }
 25 |     |     }
 26 |     |     // ------------------------------
 27 |     |     //         --  block number  --
 28 |     |     // ------------------------------
 29 |     | 
 30 |     |     function setBlock() public {
 31 |     |         blockSet = true;
 32 |     |         blockNumber = block.number;
 33 |     |     }
 34 |     | 
 35 |     |     function check_block() public {
 36 |     |         if (blockSet) {
 37 |     |             assert(block.number <= blockNumber);
 38 |     |         }
 39 |     |     }
 40 |     | 
 41 |     |     // ------------------------------
 42 |     |     //         --  both  --
 43 |     |     // ------------------------------
 44 |     | 
 45 |     |     function check_time_and_block() public {
 46 |     |         if (blockSet && timeSet) {
 47 |     |             assert(block.timestamp <= timestamp || block.number <= blockNumber);
 48 |     |         }
 49 |     |     }
 50 |     | 
 51 |     | }

/Users/elvisskozdopolj/Documents/GitHub/test-generator/tests/test_data/src/TupleTypes.sol
   1 |     | pragma solidity ^0.8.0;
   2 |     | 
   3 |     | import "./IStruct.sol";
   4 |     | 
   5 |     | // Ran from test directory: echidna . --contract TupleTypes --test-mode assertion --test-limit 100000 --corpus-dir echidna-corpora/corpus-struct --crytic-args "--foundry-ignore-compile"
   6 |     | // Ran from test directory: test-generator ./src/TupleTypes.sol --corpus-dir echidna-corpora/corpus-struct --contract "TupleTypes" --test-directory "./test/" --inheritance-path "../src/" --fuzzer echidna
   7 |     | contract TupleTypes {
   8 |     |     struct ElementaryStruct {
   9 |     |         uint256 uintType;
  10 |     |         int256 intType;
  11 |     |         string stringType;
  12 |     |         bool boolType;
  13 |     |     }
  14 |     | 
  15 |     |     struct NestedStruct {
  16 |     |         ElementaryStruct structType;
  17 |     |         uint256 uintType;
  18 |     |     }
  19 |     | 
  20 |     |     struct FixedArrayStruct {
  21 |     |         uint256[2] fixedSized;
  22 |     |     }
  23 |     | 
  24 |     |     struct DynamicArrayStruct {
  25 |     |         uint256[] dynSized;
  26 |     |     }
  27 |     | 
  28 |     |     enum Enumerable {
  29 |     |         ZERO,
  30 |     |         ONE,
  31 |     |         TWO
  32 |     |     }
  33 |     | 
  34 |     |     ElementaryStruct testStruct;
  35 |     |     NestedStruct nestedStruct;
  36 |     |     FixedArrayStruct fixedArrayStruct;
  37 |     |     DynamicArrayStruct dynArrayStruct;
  38 |     |     Enumerable testEnum;
  39 |     |     IStruct.Inherited inheritedStruct;
  40 |     | 
  41 |     |     // ------------------------------------
  42 |     |     //         --  Elementary struct  --
  43 |     |     // ------------------------------------
  44 |     | 
  45 |     |     function updateElementaryStruct(ElementaryStruct memory input) public {
  46 |     |         testStruct = input;
  47 |     |     }
  48 |     | 
  49 |     |     function check_elementaryStruct() public {
  50 |     |         ElementaryStruct memory test = testStruct;
  51 |     |         if (
  52 |     |             test.uintType > 0 &&
  53 |     |             test.intType < 0 &&
  54 |     |             bytes(test.stringType).length > 0 &&
  55 |     |             test.boolType
  56 |     |         ) {
  57 |     |             assert(false);
  58 |     |         }
  59 |     |     }
  60 |     | 
  61 |     |     // ------------------------------------
  62 |     |     //         --  Nested struct  --
  63 |     |     // ------------------------------------
  64 |     |     function updateNestedStruct(NestedStruct memory input) public {
  65 |     |         nestedStruct = input;
  66 |     |     }
  67 |     | 
  68 |     |     function check_nestedStruct() public {
  69 |     |         NestedStruct memory test = nestedStruct;
  70 |     |         if (
  71 |     |             test.structType.boolType &&
  72 |     |             test.structType.intType < 0 &&
  73 |     |             bytes(test.structType.stringType).length > 0 &&
  74 |     |             test.structType.uintType > 0 &&
  75 |     |             test.uintType > 0
  76 |     |         ) {
  77 |     |             assert(false);
  78 |     |         }
  79 |     |     }
  80 |     | 
  81 |     |     // ------------------------------------
  82 |     |     //         --  Fixed Arr struct  --
  83 |     |     // ------------------------------------
  84 |     |     function updateFixedArrStruct(FixedArrayStruct memory input) public {
  85 |     |         fixedArrayStruct = input;
  86 |     |     }
  87 |     | 
  88 |     |     function check_fixedArrStruct() public {
  89 |     |         FixedArrayStruct memory test = fixedArrayStruct;
  90 |     |         uint256 count;
  91 |     |         for (uint256 i; i < test.fixedSized.length; i++) {
  92 |     |             if (test.fixedSized[i] > 0) {
  93 |     |                 count++;
  94 |     |             }
  95 |     |         }
  96 |     | 
  97 |     |         if (count > 0) {
  98 |     |             assert(false);
  99 |     |         }
 100 |     |     }
 101 |     | 
 102 |     |     // ------------------------------------
 103 |     |     //         --  Dyn Arr struct  --
 104 |     |     // ------------------------------------
 105 |     |     function updateDynArrStruct(DynamicArrayStruct memory input) public {
 106 |     |         dynArrayStruct = input;
 107 |     |     }
 108 |     | 
 109 |     |     function check_dynamicArrStruct() public {
 110 |     |         DynamicArrayStruct memory test = dynArrayStruct;
 111 |     |         uint256 count;
 112 |     |         for (uint256 i; i < test.dynSized.length; i++) {
 113 |     |             if (test.dynSized[i] > 0) {
 114 |     |                 count++;
 115 |     |             }
 116 |     |         }
 117 |     | 
 118 |     |         if (count > 0) {
 119 |     |             assert(false);
 120 |     |         }
 121 |     |     }
 122 |     | 
 123 |     |     // ------------------------------------
 124 |     |     //         --  Enum  --
 125 |     |     // ------------------------------------
 126 |     | 
 127 |     |     function updateEnum(Enumerable input) public {
 128 |     |         testEnum = input;
 129 |     |     }
 130 |     | 
 131 |     |     function check_enum() public {
 132 |     |         if (testEnum == Enumerable.TWO) {
 133 |     |             assert(false);
 134 |     |         }
 135 |     |     }
 136 |     | 
 137 |     |     // ------------------------------------
 138 |     |     //         --  Inherited struct  --
 139 |     |     // ------------------------------------
 140 |     |     function updateInheritedStruct(IStruct.Inherited memory input) public {
 141 |     |         inheritedStruct = input;
 142 |     |     }
 143 |     | 
 144 |     |     function check_inheritedStruct() public {
 145 |     |         IStruct.Inherited memory test = inheritedStruct;
 146 |     |         if (
 147 |     |             test.uintType > 0 &&
 148 |     |             test.boolType
 149 |     |         ) {
 150 |     |             assert(false);
 151 |     |         }
 152 |     |     }
 153 |     | }
 154 |     | 

/Users/elvisskozdopolj/Documents/GitHub/test-generator/tests/test_data/src/ValueTransfer.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | // Ran from tests/test_data/ directory: echidna . --contract ValueTransfer --test-mode assertion --test-limit 1000000 --corpus-dir echidna-corpora/corpus-value
  4 |     | // Ran from tests/test_data/ directory: test-generator ./src/ValueTransfer.sol --corpus-dir echidna-corpora/corpus-value --contract "ValueTransfer" --test-directory "./test/" --inheritance-path "../src/" --fuzzer echidna
  5 | *   | contract ValueTransfer {
  6 |     | 
  7 | *r  |     function check_balance() public {
  8 | *   |         if (address(this).balance > 0) {
  9 | *   |             assert(false);
 10 |     |         }
 11 |     |     }
 12 |     | 
 13 |     |     fallback() external payable {
 14 |     |         // Just receive Ether
 15 |     |     }
 16 |     | }

