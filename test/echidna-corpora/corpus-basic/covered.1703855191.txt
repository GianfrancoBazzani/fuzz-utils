/Users/elvisskozdopolj/Documents/TOB/echidna-auto-poc/tests/src/BasicTypes.sol
   1 |     | pragma solidity ^0.8.0;
   2 |     | 
   3 |     | // Types to check: all uint, all int, bool, address, bytes, string
   4 |     | 
   5 |     | // echidna . --contract BasicTypes --test-mode assertion --test-limit 100000 --corpus-dir corpus-basic
   6 |     | // python poc-generator.py --corpus-dir corpus-basic --contract "BasicTypes" --test-directory "./test" --target-path "../src/BasicTypes.sol"
   7 | *r  | contract BasicTypes {
   8 |     |     event AssertionFailed(bytes data);
   9 |     |     event AssertionFailed(string data);
  10 |     |     event Debug(string data);
  11 |     | 
  12 |     |     // ------------------------------
  13 |     |     //         --  bool  --
  14 |     |     // ------------------------------
  15 |     |     bool first;
  16 |     | 
  17 | *   |     function setBool(bool set) public {
  18 | *   |         first = set;
  19 |     |     }
  20 |     | 
  21 | *   |     function check_bool() view public {
  22 | *   |         if (first) {
  23 | *   |             assert(false);
  24 |     |         }
  25 |     |     }
  26 |     | 
  27 |     |     // ------------------------------
  28 |     |     //         --  uint  --
  29 |     |     // ------------------------------
  30 |     |     uint256 _uint256 = 3;
  31 |     | 
  32 | *   |     function setUint256(uint256 input) public {
  33 | *   |         _uint256 = input;
  34 |     |     }
  35 |     | 
  36 | *   |     function check_uint256() view public {
  37 | *   |         if (_uint256 % 2 == 0) {
  38 |     |             assert(false);
  39 |     |         }
  40 |     |     }
  41 |     | 
  42 | *   |     function check_large_uint256() view public {
  43 | *   |         if (_uint256 == type(uint256).max) {
  44 | *   |             assert(false);
  45 |     |         }
  46 |     |     }
  47 |     | 
  48 |     |     // ------------------------------
  49 |     |     //         --  int  --
  50 |     |     // ------------------------------
  51 |     |     int256 _int256 = 3;
  52 |     | 
  53 | *   |     function setInt256(int256 input) public {
  54 | *   |         _int256 = input;
  55 |     |     }
  56 |     | 
  57 | *   |     function check_int256() view public {
  58 | *   |         if (_int256 % 2 == 0) {
  59 | *   |             assert(false);
  60 |     |         }
  61 |     |     }
  62 |     | 
  63 | *   |     function check_large_positive_int256() view public {
  64 | *   |         if (_int256 == type(int256).max) {
  65 | *   |             assert(false);
  66 |     |         }
  67 |     |     }
  68 |     | 
  69 | *   |     function check_large_negative_int256() view public {
  70 | *   |         if (_int256 == type(int256).min) {
  71 | *   |             assert(false);
  72 |     |         }
  73 |     |     }
  74 |     |     // ------------------------------
  75 |     |     //         --  address  --
  76 |     |     // ------------------------------
  77 |     |     address providedAddress;
  78 |     | 
  79 | *   |     function setAddress(address input) public {
  80 | *r  |         require(input != address(0));
  81 | *   |         providedAddress = input;
  82 |     |     }
  83 |     | 
  84 | *   |     function check_address() view public {
  85 | *   |         if (providedAddress != address(0)) {
  86 | *   |             assert(false);
  87 |     |         }
  88 |     |     }
  89 |     |     // ------------------------------
  90 |     |     //         --  string  --
  91 |     |     // ------------------------------
  92 |     |     string providedString;
  93 |     | 
  94 | *   |     function setString(string memory input) public {
  95 | *r  |         require(bytes(input).length > 20);
  96 | *   |         providedString = input;
  97 |     |     }
  98 |     | 
  99 | *   |     function check_string() view public {
 100 | *   |         if (bytes(providedString).length > 20) {
 101 |     |             assert(false);
 102 |     |         }
 103 |     |     }
 104 |     |     // ------------------------------
 105 |     |     //         --  bytes  --
 106 |     |     // ------------------------------
 107 |     |     bytes providedBytes;
 108 |     |     bytes32 providedBytes32;
 109 |     | 
 110 |     |     // TODO bytes32, etc.
 111 | *   |     function setBytes(bytes memory input) public {
 112 | *r  |         require(input.length > 20);
 113 | *   |         providedBytes = input;
 114 |     |     }
 115 |     | 
 116 | *   |     function check_bytes() view public {
 117 | *   |         if (providedBytes.length > 20) {
 118 | *   |             assert(false);
 119 |     |         }
 120 |     |     }
 121 |     | 
 122 | *   |     function setBytes32(bytes32 input) public {
 123 | *   |         require(input != bytes32(0));
 124 | *   |         providedBytes32 = input;
 125 |     |     }
 126 |     | 
 127 |     |     // ------------------------------
 128 |     |     //         --  combination  --
 129 |     |     // ------------------------------
 130 |     | }

/Users/elvisskozdopolj/Documents/TOB/echidna-auto-poc/tests/src/DynamicArrays.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | contract DynamicArrays {
  4 |     |     uint256[] dynamicArr;
  5 |     | 
  6 |     |     function addToDynamic(uint256[] memory arr) public {
  7 |     |         for (uint256 i; i < arr.length; i++) {
  8 |     |             dynamicArr.push(arr[i]);
  9 |     |         }
 10 |     |     }
 11 |     | 
 12 |     |     function check_sumDyn() public {
 13 |     |         uint256 sum;
 14 |     |         for(uint256 i; i < dynamicArr.length; i++) {
 15 |     |             sum += dynamicArr[i];
 16 |     |         }
 17 |     | 
 18 |     |         if (sum != 0 && sum % 3 == 0) {
 19 |     |             assert(false);
 20 |     |         }
 21 |     |     }
 22 |     | }

/Users/elvisskozdopolj/Documents/TOB/echidna-auto-poc/tests/src/FixedArrays.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | contract FixedArrays {
  4 |     |     uint256[1] fixedArr;
  5 |     |     string[1] strArr;
  6 |     |     uint256 fixedIndex;
  7 |     | 
  8 |     |     function addToStrArr(string[1] memory arr) public {
  9 |     |         for(uint256 i; i < strArr.length; i++) {
 10 |     |             strArr[i] = arr[i];
 11 |     |         }
 12 |     |     }
 13 |     | 
 14 |     |     function addToFixed(uint256[1] memory arr) public {
 15 |     |         for(uint256 i; i < fixedArr.length; i++) {
 16 |     |             fixedArr[i] = arr[i];
 17 |     |         }
 18 |     |     }
 19 |     | 
 20 |     |     function arrSum(uint256[] memory arr) internal pure returns (uint256) {
 21 |     |         uint256 sum;
 22 |     |         for(uint256 i; i < arr.length; i++) {
 23 |     |             sum += arr[i];
 24 |     |         }
 25 |     |         return sum;
 26 |     |     }
 27 |     | 
 28 |     |     function check_sumFixed() public {
 29 |     |         uint256 sum;
 30 |     |         for(uint256 i; i < fixedArr.length; i++) {
 31 |     |             sum += fixedArr[i];
 32 |     |         }
 33 |     |         if (sum == 5) {
 34 |     |             assert(false);
 35 |     |         }
 36 |     |     }
 37 |     | 
 38 |     |     function check_strArr() public {
 39 |     |         if (bytes(strArr[0]).length > 0) {
 40 |     |             assert(false);
 41 |     |         }
 42 |     |     }
 43 |     | }

/Users/elvisskozdopolj/Documents/TOB/echidna-auto-poc/tests/src/TimeAdvancement.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | // echidna . --contract TimeAdvancement --test-mode assertion --test-limit 10000 --corpus-dir corpus-time
  4 |     | contract TimeAdvancement {
  5 |     |     bool timeSet;
  6 |     |     bool blockSet;
  7 |     |     uint256 timestamp;
  8 |     |     uint256 blockNumber;
  9 |     | 
 10 |     |     // ------------------------------
 11 |     |     //         --  timestamp  --
 12 |     |     // ------------------------------
 13 |     | 
 14 |     |     function setTimestamp() public {
 15 |     |         timeSet = true;
 16 |     |         timestamp = block.timestamp;
 17 |     |     }
 18 |     | 
 19 |     |     function check_timestamp() view public {
 20 |     |         if (timeSet) {
 21 |     |             assert(block.timestamp <= timestamp);
 22 |     |         }
 23 |     |     }
 24 |     |     // ------------------------------
 25 |     |     //         --  block number  --
 26 |     |     // ------------------------------
 27 |     | 
 28 |     |     function setBlock() public {
 29 |     |         blockSet = true;
 30 |     |         blockNumber = block.number;
 31 |     |     }
 32 |     | 
 33 |     |     function check_block() view public {
 34 |     |         if (blockSet) {
 35 |     |             assert(block.number <= blockNumber);
 36 |     |         }
 37 |     |     }
 38 |     | 
 39 |     |     // ------------------------------
 40 |     |     //         --  both  --
 41 |     |     // ------------------------------
 42 |     | 
 43 |     |     function check_time_and_block() view public {
 44 |     |         if (blockSet && timeSet) {
 45 |     |             assert(block.timestamp <= timestamp || block.number <= blockNumber);
 46 |     |         }
 47 |     |     }
 48 |     | 
 49 |     | }

/Users/elvisskozdopolj/Documents/TOB/echidna-auto-poc/tests/src/TupleTypes.sol

