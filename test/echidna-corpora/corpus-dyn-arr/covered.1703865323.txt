/Users/elvisskozdopolj/Documents/TOB/echidna-auto-poc/tests/src/BasicTypes.sol
   1 |     | pragma solidity ^0.8.0;
   2 |     | 
   3 |     | // Types to check: all uint, all int, bool, address, bytes, string
   4 |     | 
   5 |     | // Ran from tests directory: echidna . --contract BasicTypes --test-mode assertion --test-limit 100000 --corpus-dir corpus-basic
   6 |     | // Ran from root directory: python poc-generator.py --corpus-dir tests/corpus-basic --contract "BasicTypes" --test-directory "./tests/test/" --target-path "../src/"
   7 |     | contract BasicTypes {
   8 |     |     event AssertionFailed(bytes data);
   9 |     |     event AssertionFailed(string data);
  10 |     |     event Debug(string data);
  11 |     | 
  12 |     |     // ------------------------------
  13 |     |     //         --  bool  --
  14 |     |     // ------------------------------
  15 |     |     bool first;
  16 |     | 
  17 |     |     function setBool(bool set) public {
  18 |     |         first = set;
  19 |     |     }
  20 |     | 
  21 |     |     function check_bool() public view {
  22 |     |         if (first) {
  23 |     |             assert(false);
  24 |     |         }
  25 |     |     }
  26 |     | 
  27 |     |     // ------------------------------
  28 |     |     //         --  uint  --
  29 |     |     // ------------------------------
  30 |     |     uint256 _uint256 = 3;
  31 |     | 
  32 |     |     function setUint256(uint256 input) public {
  33 |     |         _uint256 = input;
  34 |     |     }
  35 |     | 
  36 |     |     function check_uint256() public view {
  37 |     |         if (_uint256 % 2 == 0) {
  38 |     |             assert(false);
  39 |     |         }
  40 |     |     }
  41 |     | 
  42 |     |     function check_large_uint256() public view {
  43 |     |         if (_uint256 == type(uint256).max) {
  44 |     |             assert(false);
  45 |     |         }
  46 |     |     }
  47 |     | 
  48 |     |     // ------------------------------
  49 |     |     //         --  int  --
  50 |     |     // ------------------------------
  51 |     |     int256 _int256 = 3;
  52 |     | 
  53 |     |     function setInt256(int256 input) public {
  54 |     |         _int256 = input;
  55 |     |     }
  56 |     | 
  57 |     |     function check_int256() public view {
  58 |     |         if (_int256 % 2 == 0) {
  59 |     |             assert(false);
  60 |     |         }
  61 |     |     }
  62 |     | 
  63 |     |     function check_large_positive_int256() public view {
  64 |     |         if (_int256 == type(int256).max) {
  65 |     |             assert(false);
  66 |     |         }
  67 |     |     }
  68 |     | 
  69 |     |     function check_large_negative_int256() public view {
  70 |     |         if (_int256 == type(int256).min) {
  71 |     |             assert(false);
  72 |     |         }
  73 |     |     }
  74 |     |     // ------------------------------
  75 |     |     //         --  address  --
  76 |     |     // ------------------------------
  77 |     |     address providedAddress;
  78 |     | 
  79 |     |     function setAddress(address input) public {
  80 |     |         require(input != address(0));
  81 |     |         providedAddress = input;
  82 |     |     }
  83 |     | 
  84 |     |     function check_address() public view {
  85 |     |         if (providedAddress != address(0)) {
  86 |     |             assert(false);
  87 |     |         }
  88 |     |     }
  89 |     |     // ------------------------------
  90 |     |     //         --  string  --
  91 |     |     // ------------------------------
  92 |     |     string providedString;
  93 |     | 
  94 |     |     function setString(string memory input) public {
  95 |     |         require(bytes(input).length > 20);
  96 |     |         providedString = input;
  97 |     |     }
  98 |     | 
  99 |     |     function check_string() public view {
 100 |     |         if (bytes(providedString).length > 20) {
 101 |     |             assert(false);
 102 |     |         }
 103 |     |     }
 104 |     | 
 105 |     |     // ------------------------------
 106 |     |     //         --  bytes  --
 107 |     |     // ------------------------------
 108 |     |     bytes providedBytes;
 109 |     |     bytes32 providedBytes32;
 110 |     | 
 111 |     |     // TODO bytes32, etc.
 112 |     |     function setBytes(bytes memory input) public {
 113 |     |         require(input.length > 20);
 114 |     |         providedBytes = input;
 115 |     |     }
 116 |     | 
 117 |     |     function check_bytes() public view {
 118 |     |         if (providedBytes.length > 20) {
 119 |     |             assert(false);
 120 |     |         }
 121 |     |     }
 122 |     | 
 123 |     |     function setBytes32(bytes32 input) public {
 124 |     |         require(input != bytes32(0));
 125 |     |         providedBytes32 = input;
 126 |     |     }
 127 |     | 
 128 |     |     // ------------------------------
 129 |     |     //         --  combination  --
 130 |     |     // ------------------------------
 131 |     |     bool combBool;
 132 |     |     uint256 combUint256;
 133 |     |     int256 combInt256;
 134 |     |     address combAddress;
 135 |     |     string combString;
 136 |     |     bytes combBytes;
 137 |     | 
 138 |     |     function setCombination(bool bool_input, uint256 unsigned_input, int256 signed_input, address address_input, string memory str_input, bytes memory bytes_input) public {
 139 |     |         combBool = bool_input;
 140 |     |         combUint256 = unsigned_input;
 141 |     |         combInt256 = signed_input;
 142 |     |         combAddress = address_input;
 143 |     |         combString = str_input;
 144 |     |         combBytes = bytes_input;
 145 |     |     }
 146 |     | 
 147 |     |     function check_combined_input() public view {
 148 |     |         if (combBool && combUint256 > 0 && combInt256 < 0 && combAddress != address(0) && bytes(combString).length > 0 && combBytes.length > 0) {
 149 |     |             assert(false);
 150 |     |         }
 151 |     |     }
 152 |     | }

/Users/elvisskozdopolj/Documents/TOB/echidna-auto-poc/tests/src/DynamicArrays.sol
   1 |     | pragma solidity ^0.8.0;
   2 |     | 
   3 |     | // Ran from tests directory: echidna . --contract DynamicArrays --test-mode assertion --test-limit 100000 --corpus-dir corpus-dyn-arr
   4 |     | // Ran from root directory: python poc-generator.py --corpus-dir tests/corpus-dyn-arr --contract "DynamicArrays" --test-directory "./tests/test/" --target-path "../src/"
   5 | *r  | contract DynamicArrays {
   6 |     | 
   7 |     |     // ------------------------------
   8 |     |     //         --  bool array  --
   9 |     |     // ------------------------------
  10 |     |     bool[] boolDynArr;
  11 |     | 
  12 | *   |     function addBoolArr(bool[] memory input) public {
  13 | *   |         for(uint256 i; i < input.length; i++) {
  14 | *   |             boolDynArr.push(input[i]);
  15 |     |         }  
  16 |     |     }
  17 |     | 
  18 | *   |     function check_boolArr() public view {
  19 | *   |         uint256 count;
  20 | *   |         for(uint256 i; i < boolDynArr.length; i++) {
  21 | *   |             if (boolDynArr[i]) {
  22 | *   |                 count++;
  23 |     |             }
  24 |     |         }
  25 |     | 
  26 |     |         if (count > 3) {
  27 |     |             assert(false);
  28 |     |         }
  29 |     |     }
  30 |     |     // ------------------------------
  31 |     |     //         --  uint array  --
  32 |     |     // ------------------------------
  33 |     |     uint256[] uintDynArr;
  34 |     | 
  35 | *   |     function addUintArr(uint256[] memory input) public {
  36 | *   |         for (uint256 i; i < input.length; i++) {
  37 | *   |             uintDynArr.push(input[i]);
  38 |     |         }
  39 |     |     }
  40 |     | 
  41 | *   |     function check_uintDynArr() public view {
  42 | *   |         uint256 sum;
  43 | *   |         for(uint256 i; i < uintDynArr.length; i++) {
  44 | *   |             sum += uintDynArr[i];
  45 |     |         }
  46 |     | 
  47 | *   |         if (sum != 0 && sum % 3 == 0) {
  48 |     |             assert(false);
  49 |     |         }
  50 |     |     }
  51 |     | 
  52 |     |     // ------------------------------
  53 |     |     //         --  int array  --
  54 |     |     // ------------------------------
  55 |     |     int256[] intDynArr;
  56 |     | 
  57 | *   |     function addIntArr(int256[] memory input) public {
  58 | *   |         for (uint256 i; i < input.length; i++) {
  59 | *   |             intDynArr.push(input[i]);
  60 |     |         }
  61 |     |     }
  62 |     | 
  63 | *   |     function check_intDynArr() public view {
  64 | *   |         int256 sum;
  65 | *   |         for(uint256 i; i < intDynArr.length; i++) {
  66 | *   |             sum += intDynArr[i];
  67 |     |         }
  68 |     | 
  69 | *   |         if (sum != 0 && sum % 3 == 0) {
  70 | *   |             assert(false);
  71 |     |         }
  72 |     |     }
  73 |     | 
  74 |     |     // ------------------------------
  75 |     |     //         --  address array  --
  76 |     |     // ------------------------------
  77 |     |     address[] addressDynArr;
  78 |     | 
  79 | *   |     function addAddressArr(address[] memory input) public {
  80 | *   |         for(uint256 i; i < input.length; i++) {
  81 | *   |             addressDynArr.push(input[i]);
  82 |     |         }
  83 |     |     }
  84 |     | 
  85 | *   |     function check_addressDynArr() public view {
  86 | *   |         uint256 count = 0;
  87 |     |         // At least 3 should be non-zero
  88 | *   |         for(uint256 i; i < addressDynArr.length; i++) {
  89 | *   |             if(addressDynArr[i] != address(0)) {
  90 | *   |                 count++;
  91 |     |             }
  92 |     |         }
  93 |     | 
  94 |     |         if (count > 3) {
  95 |     |             assert(false);
  96 |     |         }
  97 |     |     }
  98 |     |     // ------------------------------
  99 |     |     //         --  string array  --
 100 |     |     // ------------------------------
 101 |     |     string[] strDynArr;
 102 |     | 
 103 | *   |     function addStrArr(string[] memory input) public {
 104 | *   |         for(uint256 i; i < input.length; i++) {
 105 | *   |             strDynArr.push(input[i]);
 106 |     |         }
 107 |     |     }
 108 |     | 
 109 | *   |     function check_strDynArr() public view {
 110 | *   |         uint256 count;
 111 | *   |         for(uint256 i; i < strDynArr.length; i++) {
 112 | *   |             if (bytes(strDynArr[i]).length > 0) {
 113 | *   |                 count++;
 114 |     |             }
 115 |     |         }
 116 | *   |         if (count > 3) {
 117 | *   |             assert(false);
 118 |     |         }
 119 |     |     }
 120 |     | 
 121 |     |     // ------------------------------
 122 |     |     //         --  bytes array  --
 123 |     |     // ------------------------------
 124 |     |     bytes[] bytesDynArr;
 125 |     | 
 126 | *   |     function addBytesArr(bytes[] memory input) public {
 127 | *   |         for(uint256 i; i < input.length; i++) {
 128 | *   |             bytesDynArr.push(input[i]);
 129 |     |         }
 130 |     |     }
 131 |     | 
 132 | *   |     function check_bytesArr() public view {
 133 | *   |         uint256 count;
 134 | *   |         for(uint256 i; i < bytesDynArr.length; i++) {
 135 | *   |             if(bytesDynArr[i].length > 0) {
 136 | *   |                 count++;
 137 |     |             }
 138 |     |         }
 139 |     | 
 140 |     |         if (count > 3) {
 141 |     |             assert(false);
 142 |     |         }
 143 |     |     }
 144 |     | }

/Users/elvisskozdopolj/Documents/TOB/echidna-auto-poc/tests/src/FixedArrays.sol
   1 |     | pragma solidity ^0.8.0;
   2 |     | 
   3 |     | // Ran from tests directory: echidna . --contract FixedArrays --test-mode assertion --test-limit 100000 --corpus-dir corpus-fixed-arr
   4 |     | // Ran from root directory: python poc-generator.py --corpus-dir tests/corpus-fixed-arr --contract "FixedArrays" --test-directory "./tests/test/" --target-path "../src/"
   5 |     | contract FixedArrays {
   6 |     | 
   7 |     |     // ------------------------------
   8 |     |     //         --  bool array  --
   9 |     |     // ------------------------------
  10 |     |     bool[3] boolArr;
  11 |     | 
  12 |     |     function addBoolArr(bool[3] memory input) public {
  13 |     |         for(uint256 i; i < boolArr.length; i++) {
  14 |     |             boolArr[i] = input[i];
  15 |     |         }  
  16 |     |     }
  17 |     | 
  18 |     |     function check_boolArr() public view {
  19 |     |         if (boolArr[0] && !boolArr[1] && boolArr[2]) {
  20 |     |             assert(false);
  21 |     |         }
  22 |     |     }
  23 |     |     // ------------------------------
  24 |     |     //         --  uint array  --
  25 |     |     // ------------------------------
  26 |     |     uint256[2] uintArr;
  27 |     | 
  28 |     |     function addUintArr(uint256[2] memory input) public {
  29 |     |         for(uint256 i; i < uintArr.length; i++) {
  30 |     |             uintArr[i] = input[i];
  31 |     |         }
  32 |     |     }
  33 |     | 
  34 |     |     function check_uintArr() public view {
  35 |     |         uint256 sum;
  36 |     |         for(uint256 i; i < uintArr.length; i++) {
  37 |     |             sum += uintArr[i];
  38 |     |         }
  39 |     |         if (sum == 5) {
  40 |     |             assert(false);
  41 |     |         }
  42 |     |     }
  43 |     |     // ------------------------------
  44 |     |     //         --  int array  --
  45 |     |     // ------------------------------
  46 |     |     int256[2] intArr;
  47 |     | 
  48 |     |     function addIntArr(int256[2] memory input) public {
  49 |     |         for(uint256 i; i < intArr.length; i++) {
  50 |     |             intArr[i] = input[i];
  51 |     |         }
  52 |     |     }
  53 |     | 
  54 |     |     function check_intArr() public view {
  55 |     |         int256 sum;
  56 |     |         for(uint256 i; i < intArr.length; i++) {
  57 |     |             sum += intArr[i];
  58 |     |         }
  59 |     |         if (sum == 5) {
  60 |     |             assert(false);
  61 |     |         }
  62 |     |     }
  63 |     | 
  64 |     |     // ------------------------------
  65 |     |     //         --  address array  --
  66 |     |     // ------------------------------
  67 |     |     address[4] addressArr;
  68 |     | 
  69 |     |     function addAddressArr(address[4] memory input) public {
  70 |     |         for(uint256 i; i < addressArr.length; i++) {
  71 |     |             addressArr[i] = input[i];
  72 |     |         }
  73 |     |     }
  74 |     | 
  75 |     |     function check_addressArr() public view {
  76 |     |         uint256 count = 1;
  77 |     |         // At least 3 should be non-zero
  78 |     |         for(uint256 i; i < addressArr.length; i++) {
  79 |     |             if(addressArr[i] != address(0)) {
  80 |     |                 count++;
  81 |     |             }
  82 |     |         }
  83 |     | 
  84 |     |         if (count == addressArr.length) {
  85 |     |             assert(false);
  86 |     |         }
  87 |     |     }
  88 |     |     // ------------------------------
  89 |     |     //         --  string array  --
  90 |     |     // ------------------------------
  91 |     |     string[2] strArr;
  92 |     | 
  93 |     |     function addStrArr(string[2] memory input) public {
  94 |     |         for(uint256 i; i < strArr.length; i++) {
  95 |     |             strArr[i] = input[i];
  96 |     |         }
  97 |     |     }
  98 |     | 
  99 |     |     function check_strArr() public view {
 100 |     |         if (bytes(strArr[0]).length > 0 && bytes(strArr[1]).length > 0) {
 101 |     |             assert(false);
 102 |     |         }
 103 |     |     }
 104 |     |     // ------------------------------
 105 |     |     //         --  bytes array  --
 106 |     |     // ------------------------------
 107 |     |     bytes[2] bytesArr;
 108 |     | 
 109 |     |     function addBytesArr(bytes[2] memory input) public {
 110 |     |         for(uint256 i; i < bytesArr.length; i++) {
 111 |     |             bytesArr[i] = input[i];
 112 |     |         }
 113 |     |     }
 114 |     | 
 115 |     |     function check_bytesArr() public view {
 116 |     |         if (bytesArr[0].length > 0 && bytesArr[1].length > 0) {
 117 |     |             assert(false);
 118 |     |         }
 119 |     |     }
 120 |     | }

/Users/elvisskozdopolj/Documents/TOB/echidna-auto-poc/tests/src/TimeAdvancement.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | // echidna . --contract TimeAdvancement --test-mode assertion --test-limit 10000 --corpus-dir corpus-time
  4 |     | contract TimeAdvancement {
  5 |     |     bool timeSet;
  6 |     |     bool blockSet;
  7 |     |     uint256 timestamp;
  8 |     |     uint256 blockNumber;
  9 |     | 
 10 |     |     // ------------------------------
 11 |     |     //         --  timestamp  --
 12 |     |     // ------------------------------
 13 |     | 
 14 |     |     function setTimestamp() public {
 15 |     |         timeSet = true;
 16 |     |         timestamp = block.timestamp;
 17 |     |     }
 18 |     | 
 19 |     |     function check_timestamp() view public {
 20 |     |         if (timeSet) {
 21 |     |             assert(block.timestamp <= timestamp);
 22 |     |         }
 23 |     |     }
 24 |     |     // ------------------------------
 25 |     |     //         --  block number  --
 26 |     |     // ------------------------------
 27 |     | 
 28 |     |     function setBlock() public {
 29 |     |         blockSet = true;
 30 |     |         blockNumber = block.number;
 31 |     |     }
 32 |     | 
 33 |     |     function check_block() view public {
 34 |     |         if (blockSet) {
 35 |     |             assert(block.number <= blockNumber);
 36 |     |         }
 37 |     |     }
 38 |     | 
 39 |     |     // ------------------------------
 40 |     |     //         --  both  --
 41 |     |     // ------------------------------
 42 |     | 
 43 |     |     function check_time_and_block() view public {
 44 |     |         if (blockSet && timeSet) {
 45 |     |             assert(block.timestamp <= timestamp || block.number <= blockNumber);
 46 |     |         }
 47 |     |     }
 48 |     | 
 49 |     | }

/Users/elvisskozdopolj/Documents/TOB/echidna-auto-poc/tests/src/TupleTypes.sol

